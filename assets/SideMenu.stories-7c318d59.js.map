{"version":3,"file":"SideMenu.stories-7c318d59.js","sources":["../../src/DesignSystem/Navigation/SideHeaderMenu.vue"],"sourcesContent":["<template>\n  <div :class=\"[currentLabel ? 'displayRow' : 'displayColumn', 'menuWrapper']\">\n    <IconSvg\n      class=\"restore-menu\"\n      :path=\"ArrowLeft\"\n      v-if=\"currentLabel\"\n      :iconColorHover=\"'var(--primary)'\"\n      @click=\"handleClick(null, $event)\"\n    />\n    <div\n      v-for=\"entry in props.list\"\n      :key=\"entry.name\"\n      class=\"label\"\n      @mouseover=\"hoverIndex = entry.name\"\n      @mouseleave=\"hoverIndex = null\"\n      @click=\"handleClick(entry, $event)\"\n    >\n      <div class=\"label-content\">\n        <IconSvg\n          :path=\"entry.icon\"\n          :iconColor=\"\n            hoverIndex === entry.name ||\n            (currentLabel?.name === entry.name && !hoverIndex)\n              ? 'var(--primary)'\n              : 'var(--white)'\n          \"\n        />\n        <span class=\"panelTitle\" v-if=\"!currentLabel\">{{ entry.name }}</span>\n      </div>\n    </div>\n  </div>\n  <div class=\"subtitle\" v-if=\"currentLabel\">\n    {{ hoverIndex || currentLabel.name }}\n  </div>\n</template>\n<script lang=\"ts\">\nexport interface PanelMenu {\n  name: string;\n  icon: string;\n}\nconst menuEntries = reactive<PanelMenu[]>([]);\n\nexport function sideBarMenuListOption() {\n  return {\n    menuEntries,\n  };\n}\n</script>\n<script setup lang=\"ts\">\nimport IconSvg from \"@/DesignSystem/Icons/IconSvg.vue\";\nimport ArrowLeft from \"@/DesignSystem/Icons/List/ArrowLeft\";\nimport { ref, type PropType,reactive } from \"vue\";\nconst props = defineProps({\n  /**\n   * an array of Object with path icon and label to display\n   */\n  list: Array as PropType<PanelMenu[]>,\n  /**\n   * a callback function, get string label of current menu\n   */\n  onInteraction: {\n    type: Function,\n    required: false,\n  },\n});\nconst hoverIndex = ref<null | string>(null);\nconst currentLabel = ref<null | PanelMenu>(null);\n\nconst handleClick = (value: PanelMenu | null, event: Event) => {\n  event.preventDefault();\n  currentLabel.value = value;\n  if (props.onInteraction) {\n    props.onInteraction(currentLabel);\n  }\n};\n</script>\n\n<style scoped>\n.restore-menu {\n  margin-right: 15px;\n}\n.label {\n  color: var(--white);\n  display: inline-block;\n}\n.label-content {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n}\n.label:hover {\n  color: var(--primary);\n}\n.menuWrapper {\n  cursor: pointer;\n  display: flex;\n  transition: flex-direction 1s ease-in-out;\n}\n.displayRow {\n  flex-direction: row;\n  justify-content: space-evenly;\n  align-items: center;\n}\n.displayColumn {\n  flex-direction: column;\n  padding-left: 15px;\n}\n.subtitle {\n  font-size: 18px;\n  color: var(--primary);\n  text-align: center;\n  margin-top: 10px;\n}\n.panelTitle {\n  margin-left: 15px;\n  text-align: left;\n  font-style: normal;\n  font-family: Poppins;\n  font-size: 18px;\n  letter-spacing: 0px;\n  white-space: nowrap;\n}\n</style>\n"],"names":["reactive","hoverIndex","ref","currentLabel","handleClick","value","event","props"],"mappings":"mkBAwCoBA,EAAsB,EAAE,qHAyBtCC,EAAaC,EAAmB,IAAI,EACpCC,EAAeD,EAAsB,IAAI,EAEzCE,EAAc,CAACC,EAAyBC,IAAiB,CAC7DA,EAAM,eAAe,EACrBH,EAAa,MAAQE,EACjBE,EAAM,eACRA,EAAM,cAAcJ,CAAY,CAClC;;;;;;;;;;"}